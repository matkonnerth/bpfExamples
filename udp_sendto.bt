BEGIN 
{ 
    printf("traces the way of a udp packet through kernel\n");
    printf("parameters: pid of publisher %d\n", $1);
    @publisherPid=$1;
    if(!@publisherPid)
    {
        printf("pid of publisher must be passed, exiting\n");
        exit();
    }
    @start = nsecs;
    @lastSendTo=0;
}

//uprobe in publisher
uprobe:/home/matzy/git/openOpen/build/bin/examples/tutorial_pubsub_publish:UA_WriterGroup_publishCallback 
{
    printf("%d: publishcallback\n", (nsecs-@start)/1000);
}

tracepoint:syscalls:sys_enter_sendto /pid==@publisherPid/
{
    printf("%d: sys_enter_sendto, pid: %s length: %d fd: %d\n", (nsecs-@start)/1000, comm, args->len, args->fd);
    @sys_enter_sendto_ns = nsecs;
    if(@lastSendTo)
    {
        $diff = nsecs-@lastSendTo;
        @intervall_us = lhist($diff/1000, 0, 200000, 10000);
    }
    @lastSendTo=nsecs;
    //@[ustack] = count();
}

kprobe:ip_send_skb /pid==@publisherPid/
{
    printf("%d, ip_send_skb, skbuf: %p\n", (nsecs-@start)/1000, arg1);
    @sys_enter_sendto_ns_skbuf[arg1]=@sys_enter_sendto_ns;
}

tracepoint:skb:consume_skb
{
    $sys_enter_ns = @sys_enter_sendto_ns_skbuf[args->skbaddr];
    if($sys_enter_ns)
    {
        printf("%d, skb_consume_skb, skbaddr: %p\n", (nsecs-@start)/1000, args->skbaddr);
        $delta_ns = nsecs - $sys_enter_ns;
        @latency_us = lhist($delta_ns/1000, 0, 1000, 50);
        delete(@sys_enter_sendto_ns_skbuf[args->skbaddr]);
    }
}